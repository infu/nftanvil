type Token = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: CallbackFunc;
                              token: Token;
                            };};
type StatsResponse = 
 record {
   cycles: nat;
   cycles_recieved: nat;
   rts_heap_size: nat;
   rts_max_live_size: nat;
   rts_memory_size: nat;
   rts_reclaimed: nat;
   rts_total_allocation: nat;
   rts_version: text;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type RegisterResponse = 
 variant {
   err: text;
   ok: FTokenId__1;
 };
type RegisterRequest = 
 record {
   controller: principal;
   decimals: nat8;
   desc: text;
   fee: nat64;
   image: blob;
   kind: FTKind;
   name: text;
   origin: text;
   symbol: text;
   transferable: bool;
 };
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type MintResponse = 
 variant {
   err: text;
   ok: record {transactionId: blob;};
 };
type MintRequest = 
 record {
   aid: AccountIdentifier;
   amount: nat64;
   id: FTokenId__1;
   mintable: bool;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FTokenId__1 = nat64;
type FTokenId = nat64;
type FTMeta = 
 record {
   controller: principal;
   decimals: nat8;
   desc: text;
   fee: nat64;
   kind: FTKind;
   mintable: bool;
   name: text;
   origin: text;
   symbol: text;
   total_supply: nat64;
   transferable: bool;
 };
type FTLogistics = 
 record {
   fee: nat64;
   kind: FTKind;
   transferable: bool;
 };
type FTKind = 
 variant {
   fractionless;
   normal;
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   tokenregistry: CanisterSlot;
   treasury: CanisterSlot;
 };
type Class = 
 service {
   config_set: (Config) -> ();
   http_request: (Request) -> (Response) query;
   meta: (FTokenId) -> (FTMeta) query;
   mint: (MintRequest) -> (MintResponse);
   oracle_set: (Oracle) -> ();
   register: (RegisterRequest) -> (RegisterResponse);
   stats: () -> (StatsResponse) query;
   token_logistics: (FTokenId) -> (FTLogistics) query;
   wallet_receive: () -> ();
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type CallbackFunc = func () -> ();
type AccountIdentifier = blob;
service : () -> Class
