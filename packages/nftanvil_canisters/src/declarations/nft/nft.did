type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UseResponse = 
 variant {
   err:
    variant {
      ExtensionError: text;
      ICE: text;
      InsufficientBalance;
      InvalidToken;
      OnCooldown;
      Other: text;
      OutOfPower;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: record {transactionId: TransactionId;};
 };
type UseRequest = 
 record {
   customVar: opt CustomVar;
   memo: Memo;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   use: ItemUse;
   user: User;
 };
type UploadChunkRequest = 
 record {
   chunkIdx: nat32;
   data: blob;
   position: variant {
               content;
               thumb;
             };
   subaccount: opt SubAccount;
   tokenIndex: TokenIndex;
 };
type UnsocketResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken;
      Other: text;
      OutOfPower;
      Rejected;
      Unauthorized: AccountIdentifier;
      UnplugError: UnplugError;
    };
   ok: record {transactionId: TransactionId;};
 };
type UnsocketRequest = 
 record {
   memo: Memo;
   plug: TokenIdentifier;
   socket: TokenIdentifier;
   subaccount: opt SubAccount;
   user: User;
 };
type UnplugResponse = 
 variant {
   err: UnplugError;
   ok;
 };
type UnplugError = 
 variant {
   InsufficientBalance;
   InvalidToken;
   NotLegitimateCaller;
   Other: text;
   Rejected;
   Unauthorized: AccountIdentifier;
 };
type TransferResponseError = 
 variant {
   ICE: text;
   InsufficientBalance;
   InvalidToken;
   NotTransferable;
   Other: text;
   OutOfPower;
   Rejected;
   Unauthorized: AccountIdentifier;
 };
type TransferResponse = 
 variant {
   err: TransferResponseError;
   ok: record {transactionId: TransactionId;};
 };
type TransferRequest = 
 record {
   from: User;
   memo: Memo;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TransferLinkResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken;
      Other: text;
      OutOfPower;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok;
 };
type TransferLinkRequest = 
 record {
   from: User;
   hash: blob;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type TransactionId = blob;
type TokenIndex = nat16;
type TokenIdentifier = nat64;
type Token = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type Time = int;
type Tags = vec Tag;
type Tag = text;
type SupplyResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type SubAccount = blob;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: CallbackFunc;
                              token: Token;
                            };};
type Sockets = vec TokenIdentifier;
type SocketResponse = 
 variant {
   err: SocketError;
   ok;
 };
type SocketRequest = 
 record {
   plug: TokenIdentifier;
   socket: TokenIdentifier;
   subaccount: opt SubAccount;
   user: User;
 };
type SocketError = 
 variant {
   ClassError: text;
   InsufficientBalance;
   InvalidToken;
   NotLegitimateCaller;
   Other: text;
   Rejected;
   SocketsFull;
   Unauthorized: AccountIdentifier;
 };
type Share = nat16;
type SetPriceResponse = 
 variant {
   err:
    variant {
      ICE: text;
      InsufficientBalance;
      InvalidToken;
      NotTransferable;
      Other: text;
      OutOfPower;
      TooHigh;
      TooLow;
      Unauthorized: AccountIdentifier;
    };
   ok: record {transactionId: TransactionId;};
 };
type SetPriceRequest = 
 record {
   price: Price;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type Response__1 = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request__1 = 
 record {
   owner: User;
   spender: principal;
   token: TokenIdentifier;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type RechargeResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InsufficientPayment: Balance;
      InvalidToken;
      RechargeUnnecessary;
      Rejected;
      Unauthorized;
    };
   ok;
 };
type RechargeRequest = 
 record {
   amount: Balance;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type Quality = nat8;
type PurchaseResponse = 
 variant {
   err:
    variant {
      ErrorWhileRefunding;
      ICE: text;
      InsufficientBalance;
      InsufficientPayment: Balance;
      InvalidToken;
      NotEnoughToRefund;
      NotForSale;
      Refunded;
      Rejected;
      TreasuryNotifyFailed;
      Unauthorized;
    };
   ok: record {
         purchase: NFTPurchase;
         transactionId: TransactionId;
       };
 };
type PurchaseRequest = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    amount: Balance;
                  };
   amount: Balance;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type Price = 
 record {
   amount: nat64;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
 };
type PlugResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken;
      Other: text;
      OutOfPower;
      Rejected;
      SocketError: SocketError;
      Unauthorized: AccountIdentifier;
    };
   ok: record {transactionId: TransactionId;};
 };
type PlugRequest = 
 record {
   memo: Memo;
   plug: TokenIdentifier;
   socket: TokenIdentifier;
   subaccount: opt SubAccount;
   user: User;
 };
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type NFTPurchase = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    amount: Balance;
                  };
   amount: Balance;
   author: record {
             address: AccountIdentifier;
             share: Share;
           };
   buyer: AccountIdentifier;
   created: Time;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
   recharge: Balance;
   seller: AccountIdentifier;
   token: TokenIdentifier;
 };
type MintResponse = 
 variant {
   err:
    variant {
      ClassError: text;
      ICE: text;
      InsufficientBalance;
      Invalid: text;
      OutOfMemory;
      Pwr: TransferResponseError;
      Rejected;
      Unauthorized;
    };
   ok: record {
         tokenIndex: TokenIndex;
         transactionId: TransactionId;
       };
 };
type MintRequest = 
 record {
   metadata: MetadataInput;
   subaccount: opt SubAccount;
   user: User;
 };
type MetavarsFrozen = 
 record {
   allowance: opt principal;
   boundUntil: opt nat32;
   cooldownUntil: opt nat32;
   history: vec blob;
   price: Price;
   pwrOps: nat64;
   pwrStorage: nat64;
   sockets: Sockets;
   ttl: opt nat32;
 };
type MetadataResponse = 
 variant {
   err: CommonError;
   ok:
    record {
      bearer: AccountIdentifier;
      data: Metadata;
      vars: MetavarsFrozen;
    };
 };
type MetadataInput = 
 record {
   attributes: Attributes;
   authorShare: Share;
   content: opt Content;
   custom: opt CustomData;
   customVar: opt CustomVar;
   domain: opt DomainName;
   lore: opt text;
   name: opt text;
   price: Price;
   quality: Quality;
   rechargeable: bool;
   secret: bool;
   tags: Tags;
   thumb: Content;
   transfer: ItemTransfer;
   ttl: opt nat32;
 };
type Metadata = 
 record {
   attributes: Attributes;
   author: AccountIdentifier;
   authorShare: Share;
   content: opt Content;
   created: nat32;
   custom: opt CustomData;
   domain: opt DomainName;
   entropy: blob;
   lore: opt ItemLore;
   name: opt ItemName;
   quality: Quality;
   rechargeable: bool;
   secret: bool;
   tags: Tags;
   thumb: Content;
   transfer: ItemTransfer;
 };
type Memo = blob;
type ItemUse = 
 variant {
   consume;
   cooldown: Cooldown;
   prove;
 };
type ItemTransfer = 
 variant {
   bindsDuration: nat32;
   bindsForever;
   unrestricted;
 };
type ItemName = text;
type ItemLore = text;
type IPFS_CID = text;
type HeaderField = 
 record {
   text;
   text;
 };
type FetchChunkRequest = 
 record {
   chunkIdx: nat32;
   position: variant {
               content;
               thumb;
             };
   subaccount: opt SubAccount;
   tokenIndex: TokenIndex;
 };
type ExternalUrl = text;
type DomainName = text;
type CustomVar = blob;
type CustomData = blob;
type Cooldown = nat32;
type ContentType = text;
type Content = 
 variant {
   external: ExternalUrl;
   internal: record {
               contentType: ContentType;
               size: nat32;
             };
   ipfs: record {
           cid: IPFS_CID;
           contentType: ContentType;
           size: nat32;
         };
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   tokenregistry: CanisterSlot;
   treasury: CanisterSlot;
 };
type CommonError = 
 variant {
   InvalidToken;
   Other: text;
 };
type Class = 
 service {
   allowance: (Request__1) -> (Response__1) query;
   approve: (ApproveRequest) -> (ApproveResponse);
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier) -> (BearerResponse) query;
   burn: (BurnRequest) -> (BurnResponse);
   claim_link: (ClaimLinkRequest) -> (ClaimLinkResponse);
   config_set: (Config) -> ();
   fetch_chunk: (FetchChunkRequest) -> (opt blob);
   http_request: (Request) -> (Response) query;
   http_request_streaming_callback: (Token) -> (Callback) query;
   metadata: (TokenIdentifier) -> (MetadataResponse) query;
   mint: (MintRequest) -> (MintResponse);
   oracle_set: (Oracle) -> ();
   plug: (PlugRequest) -> (PlugResponse);
   purchase: (PurchaseRequest) -> (PurchaseResponse);
   recharge: (RechargeRequest) -> (RechargeResponse);
   set_price: (SetPriceRequest) -> (SetPriceResponse);
   socket: (SocketRequest) -> (SocketResponse);
   stats: () ->
    (record {
       burned: nat32;
       cycles: nat;
       cycles_recieved: nat;
       icall_errors: nat;
       minted: nat16;
       rts_heap_size: nat;
       rts_max_live_size: nat;
       rts_memory_size: nat;
       rts_reclaimed: nat;
       rts_total_allocation: nat;
       rts_version: text;
       transfers: nat32;
     }) query;
   supply: (TokenIdentifier) -> (SupplyResponse) query;
   transfer: (TransferRequest) -> (TransferResponse);
   transfer_link: (TransferLinkRequest) -> (TransferLinkResponse);
   unplug: (UnsocketRequest) -> (UnplugResponse);
   unsocket: (UnsocketRequest) -> (UnsocketResponse);
   upload_chunk: (UploadChunkRequest) -> ();
   use: (UseRequest) -> (UseResponse);
   wallet_receive: () -> ();
 };
type ClaimLinkResponse = 
 variant {
   err: variant {
          Other: text;
          Rejected;
        };
   ok: record {transactionId: TransactionId;};
 };
type ClaimLinkRequest = 
 record {
   key: blob;
   to: User;
   token: TokenIdentifier;
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type CallbackFunc = func () -> ();
type Callback = 
 record {
   body: blob;
   token: opt Token;
 };
type BurnResponse = 
 variant {
   err: TransferResponseError;
   ok: record {transactionId: TransactionId;};
 };
type BurnRequest = 
 record {
   memo: Memo;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type BearerResponse = 
 variant {
   err: CommonError;
   ok: AccountIdentifier;
 };
type BalanceResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat64;
type Attributes = vec Attribute;
type Attribute = 
 record {
   text;
   nat16;
 };
type ApproveResponse = 
 variant {
   err:
    variant {
      ICE: text;
      InsufficientBalance;
      InvalidToken;
      Other: text;
      OutOfPower;
      Unauthorized: AccountIdentifier;
    };
   ok: record {transactionId: TransactionId;};
 };
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AccountIdentifier = blob;
service : () -> Class
