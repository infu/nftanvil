type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UseResponse = 
 variant {
   err:
    variant {
      ExtensionError: text;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      OnCooldown;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: variant {
         consumed;
         cooldown: nat32;
       };
 };
type UseRequest = 
 record {
   memo: Memo;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type UploadChunkRequest = 
 record {
   chunkIdx: nat32;
   data: blob;
   position: variant {
               content;
               thumb;
             };
   subaccount: opt SubAccount;
   tokenIndex: TokenIndex;
 };
type UnsocketResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
      UnplugError: UnplugError;
    };
   ok;
 };
type UnsocketRequest = 
 record {
   plug: TokenIdentifier;
   socket: TokenIdentifier;
   subaccount: opt SubAccount;
   user: User;
 };
type UnplugResponse = 
 variant {
   err: UnplugError;
   ok;
 };
type UnplugError = 
 variant {
   InsufficientBalance;
   InvalidToken: TokenIdentifier;
   NotLegitimateCaller;
   Other: text;
   Rejected;
   Unauthorized: AccountIdentifier;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      NotTransferable;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TransferLinkResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: nat32;
 };
type TransferLinkRequest = 
 record {
   amount: Balance;
   from: User;
   hash: blob;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifierBlob = blob;
type TokenIdentifier = text;
type Token = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type Tags = vec Tag;
type Tag = text;
type SupplyResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type SubAccount = blob;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: CallbackFunc;
                              token: Token;
                            };};
type StatsResponse = 
 record {
   burned: nat32;
   cycles: nat;
   minted: nat32;
   rts_heap_size: nat;
   rts_max_live_size: nat;
   rts_memory_size: nat;
   rts_reclaimed: nat;
   rts_total_allocation: nat;
   rts_version: text;
   transfers: nat32;
 };
type Sockets = vec TokenIdentifierBlob;
type SocketResponse = 
 variant {
   err: SocketError;
   ok;
 };
type SocketRequest = 
 record {
   plug: TokenIdentifier;
   socket: TokenIdentifier;
   subaccount: opt SubAccount;
   user: User;
 };
type SocketError = 
 variant {
   ClassError: text;
   InsufficientBalance;
   InvalidToken: TokenIdentifier;
   NotLegitimateCaller;
   Other: text;
   Rejected;
   SocketsFull;
   Unauthorized: AccountIdentifier;
 };
type Share = nat16;
type SetPriceResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      NotTransferable;
      Other: text;
      TooHigh;
      TooLow;
      Unauthorized: AccountIdentifier;
    };
   ok;
 };
type SetPriceRequest = 
 record {
   price: Price;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type Response__1 = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request__1 = 
 record {
   owner: User;
   spender: principal;
   token: TokenIdentifier;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type PurchaseIntentResponse = 
 variant {
   err: variant {
          InvalidToken: TokenIdentifier;
          NotForSale;
        };
   ok: record {
         paymentAddress: AccountIdentifier;
         price: Price;
       };
 };
type PurchaseIntentRequest = 
 record {
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type PurchaseClaimResponse = 
 variant {
   err:
    variant {
      ErrorWhileRefunding;
      InvalidToken: TokenIdentifier;
      NotEnoughToRefund;
      NotForSale;
      Refunded;
      TreasuryNotifyFailed;
    };
   ok;
 };
type PurchaseClaimRequest = 
 record {
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type Price = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    share: Share;
                  };
   amount: nat64;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
 };
type PlugResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      SocketError: SocketError;
      Unauthorized: AccountIdentifier;
    };
   ok;
 };
type PlugRequest = 
 record {
   plug: TokenIdentifier;
   socket: TokenIdentifier;
   subaccount: opt SubAccount;
   user: User;
 };
type MintResponse = 
 variant {
   err:
    variant {
      ClassError: text;
      InsufficientBalance;
      Invalid: text;
      OutOfMemory;
      Rejected;
      Unauthorized;
    };
   ok: TokenIndex;
 };
type MintRequest = 
 record {
   metadata: MetadataInput;
   subaccount: opt SubAccount;
   to: User;
 };
type MetavarsFrozen = 
 record {
   boundUntil: opt nat32;
   cooldownUntil: opt nat32;
   price: Price;
   sockets: Sockets;
 };
type MetadataResponse = 
 variant {
   err: CommonError;
   ok:
    record {
      bearer: AccountIdentifier;
      data: Metadata;
      vars: MetavarsFrozen;
    };
 };
type MetadataInput = 
 record {
   attributes: Attributes;
   authorShare: Share;
   classId: opt AnvilClassId;
   content: opt Content;
   custom: opt CustomData;
   lore: opt text;
   name: opt text;
   price: Price;
   quality: nat8;
   secret: bool;
   tags: Tags;
   thumb: Content;
   transfer: ItemTransfer;
   ttl: opt nat32;
 };
type Metadata = 
 record {
   attributes: Attributes;
   author: AccountIdentifier;
   authorShare: Share;
   classId: opt AnvilClassId;
   classIndex: opt AnvilClassIndex;
   content: opt Content;
   created: nat32;
   custom: opt CustomData;
   entropy: blob;
   lore: opt ItemLore;
   name: opt ItemName;
   quality: nat8;
   secret: bool;
   tags: Tags;
   thumb: Content;
   transfer: ItemTransfer;
   ttl: opt nat32;
 };
type Memo = nat64;
type ItemTransfer = 
 variant {
   bindsDuration: nat32;
   bindsForever;
   unrestricted;
 };
type ItemName = text;
type ItemLore = text;
type IPFS_CID = text;
type HeaderField = 
 record {
   text;
   text;
 };
type FetchChunkRequest = 
 record {
   chunkIdx: nat32;
   position: variant {
               content;
               thumb;
             };
   subaccount: opt SubAccount;
   tokenIndex: TokenIndex;
 };
type CustomData = blob;
type ContentType = text;
type Content = 
 variant {
   external;
   internal: record {
               contentType: ContentType;
               size: nat32;
             };
   ipfs: record {
           cid: IPFS_CID;
           contentType: ContentType;
           size: nat32;
         };
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type Class = 
 service {
   allowance: (Request__1) -> (Response__1) query;
   approve: (ApproveRequest) -> (ApproveResponse);
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier) -> (BearerResponse) query;
   burn: (BurnRequest) -> (BurnResponse);
   claim_link: (ClaimLinkRequest) -> (ClaimLinkResponse);
   cyclesAccept: () -> ();
   cyclesBalance: () -> (nat) query;
   fetchChunk: (FetchChunkRequest) -> (opt blob);
   http_request: (Request) -> (Response) query;
   http_request_streaming_callback: (Token) -> (Callback) query;
   metadata: (TokenIdentifier) -> (MetadataResponse) query;
   mintNFT: (MintRequest) -> (MintResponse);
   plug: (PlugRequest) -> (PlugResponse);
   purchase_claim: (PurchaseClaimRequest) -> (PurchaseClaimResponse);
   purchase_intent: (PurchaseIntentRequest) -> (PurchaseIntentResponse);
   set_price: (SetPriceRequest) -> (SetPriceResponse);
   socket: (SocketRequest) -> (SocketResponse);
   stats: () -> (StatsResponse) query;
   supply: (TokenIdentifier) -> (SupplyResponse) query;
   transfer: (TransferRequest) -> (TransferResponse);
   transfer_link: (TransferLinkRequest) -> (TransferLinkResponse);
   unplug: (UnsocketRequest) -> (UnplugResponse);
   unsocket: (UnsocketRequest) -> (UnsocketResponse);
   uploadChunk: (UploadChunkRequest) -> ();
   use: (UseRequest) -> (UseResponse);
 };
type ClaimLinkResponse = 
 variant {
   err: variant {
          Other: text;
          Rejected;
        };
   ok;
 };
type ClaimLinkRequest = 
 record {
   key: blob;
   to: User;
   token: TokenIdentifier;
 };
type CallbackFunc = func () -> ();
type Callback = 
 record {
   body: blob;
   token: opt Token;
 };
type BurnResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      NotTransferable;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type BurnRequest = 
 record {
   amount: Balance;
   memo: Memo;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type BearerResponse = 
 variant {
   err: CommonError;
   ok: AccountIdentifier;
 };
type BalanceResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat64;
type Attributes = vec Attribute;
type Attribute = 
 record {
   text;
   nat16;
 };
type ApproveResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Unauthorized: AccountIdentifier;
    };
   ok;
 };
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AnvilClassIndex = nat32;
type AnvilClassId = nat32;
type AccountIdentifier = blob;
service : (record {
             _acclist: vec text;
             _anvilclass: principal;
             _debug_cannisterId: opt principal;
             _router: principal;
             _slot: nat32;
             _treasury: principal;
           }) -> Class
