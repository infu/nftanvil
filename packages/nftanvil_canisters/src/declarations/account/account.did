type TransactionId = blob;
type TokenIndex = nat16;
type TokenIdentifier__1 = nat64;
type TokenIdentifier = nat64;
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterSlot;
   router: principal;
   space: vec vec nat64;
 };
type Class = 
 service {
   add: (AccountIdentifier, TokenIndex) -> ();
   add_transaction: (AccountIdentifier, TransactionId) -> ();
   config_set: (Config) -> ();
   list: (AccountIdentifier, nat) -> (vec TokenIdentifier__1) query;
   meta: (AccountIdentifier) -> (opt AccountMeta) query;
   oracle_set: (Oracle) -> ();
   rem: (AccountIdentifier, TokenIndex) -> ();
   stats: () ->
    (record {
       cycles: nat;
       cycles_recieved: nat;
       rts_heap_size: nat;
       rts_max_live_size: nat;
       rts_memory_size: nat;
       rts_reclaimed: nat;
       rts_total_allocation: nat;
       rts_version: text;
       total_accounts: nat;
     }) query;
   wallet_receive: () -> ();
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type AddressInfo = 
 record {
   avatar: TokenIdentifier;
   background: TokenIdentifier;
   name: text;
 };
type AccountMeta = 
 record {
   info: opt AddressInfo;
   transactions: vec TransactionId;
 };
type AccountIdentifier = blob;
service : () -> Class
