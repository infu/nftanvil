type WithdrawResponse = 
 variant {
   err: variant {
          NotEnoughForTransfer;
          TransferFailed;
        };
   ok: record {transactionId: blob;};
 };
type WithdrawRequest = 
 record {
   subaccount: opt SubAccount;
   user: User;
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TokenIdentifier = nat32;
type Time = int;
type SubAccount = blob;
type Share = nat16;
type NFTPurchaseResponse = 
 variant {
   err: text;
   ok;
 };
type NFTPurchase = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier__1;
                    share: Share;
                  };
   amount: ICP;
   author: record {
             address: AccountIdentifier__1;
             share: Share;
           };
   buyer: AccountIdentifier__1;
   created: Time;
   ledgerBlock: BlockIndex;
   marketplace: opt record {
                      address: AccountIdentifier__1;
                      share: Share;
                    };
   purchaseAccount: AccountIdentifier__1;
   seller: AccountIdentifier__1;
   token: TokenIdentifier;
 };
type ICP = record {e8s: nat64;};
type Config = 
 record {
   account: CanisterRange;
   anv: CanisterSlot__1;
   history: CanisterSlot__1;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot__1;
   pwr: CanisterSlot__1;
   router: CanisterSlot__1;
   space: vec vec nat64;
   treasury: CanisterSlot__1;
 };
type Class = 
 service {
   balance: (BalanceRequest) -> (BalanceResponse) query;
   config_set: (Config) -> ();
   dumpBalances: () -> (vec record {
                              AccountIdentifier__2;
                              Balance;
                            }) query;
   notify_NFTPurchase: (NFTPurchase) -> (NFTPurchaseResponse);
   withdraw: (WithdrawRequest) -> (WithdrawResponse);
 };
type CanisterSlot__1 = nat16;
type CanisterSlot = nat16;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type BlockIndex = nat64;
type BalanceResponse = nat64;
type BalanceRequest = 
 record {
   subaccount: opt SubAccount;
   user: User;
 };
type Balance = nat64;
type AccountIdentifier__2 = blob;
type AccountIdentifier__1 = blob;
type AccountIdentifier = blob;
service : () -> Class
