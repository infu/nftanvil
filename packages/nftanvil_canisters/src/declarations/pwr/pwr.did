type WithdrawResponse = 
 variant {
   err: TransferResponseError;
   ok: record {transactionId: blob;};
 };
type WithdrawRequest = 
 record {
   amount: Balance__1;
   from: User__1;
   subaccount: opt SubAccount__1;
   to: User__1;
 };
type User__2 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type User__1 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponseError = 
 variant {
   ICE: text;
   InsufficientBalance;
   InvalidToken;
   NotTransferable;
   Other: text;
   OutOfPower;
   Rejected;
   Unauthorized: AccountIdentifier;
 };
type TransferResponse = 
 variant {
   err: TransferResponseError;
   ok: record {transactionId: blob;};
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   subaccount: opt SubAccount;
   to: User;
   token: FTokenId;
 };
type TransferOldResponse = 
 variant {
   err: TransferResponseError;
   ok: record {transactionId: blob;};
 };
type TransferOldRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   subaccount: opt SubAccount;
   to: User;
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: ICP;};
   InsufficientFunds: record {balance: ICP;};
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type TransactionId = blob;
type TokenIndex = nat16;
type TokenIdentifier = nat64;
type Time = int;
type Tags = vec Tag;
type Tag = text;
type SubAccount__2 = blob;
type SubAccount__1 = blob;
type SubAccount = blob;
type Share = nat16;
type Result = 
 variant {
   err: text;
   ok;
 };
type RegisterRequest = 
 record {
   controller: principal;
   decimals: nat8;
   desc: text;
   fee: nat64;
   image: blob;
   kind: FTKind;
   name: text;
   origin: text;
   symbol: text;
   transferable: bool;
 };
type RechargeResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InsufficientPayment: Balance__2;
      InvalidToken;
      RechargeUnnecessary;
      Rejected;
      Unauthorized;
    };
   ok;
 };
type RechargeRequest = 
 record {
   amount: Balance__2;
   subaccount: opt SubAccount__2;
   token: TokenIdentifier;
   user: User__2;
 };
type Quality = nat8;
type PurchaseResponse = 
 variant {
   err:
    variant {
      ErrorWhileRefunding;
      ICE: text;
      InsufficientBalance;
      InsufficientPayment: Balance__2;
      InvalidToken;
      NotEnoughToRefund;
      NotForSale;
      Refunded;
      Rejected;
      TreasuryNotifyFailed;
      Unauthorized;
    };
   ok: record {
         purchase: NFTPurchase;
         transactionId: TransactionId;
       };
 };
type PurchaseRequest = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    amount: Balance__2;
                  };
   amount: Balance__2;
   subaccount: opt SubAccount__2;
   token: TokenIdentifier;
   user: User__2;
 };
type PurchaseIntentResponse = 
 variant {
   err: text;
   ok: AccountIdentifier__1;
 };
type PurchaseIntentRequest = 
 record {
   subaccount: opt SubAccount;
   user: User;
 };
type PurchaseClaimResponse = 
 variant {
   err: variant {
          Ledger: TransferError;
          PaymentTooSmall;
        };
   ok: record {transactionId: blob;};
 };
type PurchaseClaimRequest = 
 record {
   subaccount: opt SubAccount;
   user: User;
 };
type Price = 
 record {
   amount: nat64;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
 };
type Oracle__1 = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type NFTPurchase = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    amount: Balance__2;
                  };
   amount: Balance__2;
   author: record {
             address: AccountIdentifier;
             share: Share;
           };
   buyer: AccountIdentifier;
   created: Time;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
   recharge: Balance__2;
   seller: AccountIdentifier;
   token: TokenIdentifier;
 };
type MintResponse = 
 variant {
   err:
    variant {
      ClassError: text;
      ICE: text;
      InsufficientBalance;
      Invalid: text;
      OutOfMemory;
      Pwr: TransferResponseError;
      Rejected;
      Unauthorized;
    };
   ok: record {
         tokenIndex: TokenIndex;
         transactionId: TransactionId;
       };
 };
type MintRequest = 
 record {
   metadata: MetadataInput;
   subaccount: opt SubAccount__2;
   user: User__2;
 };
type MetadataInput = 
 record {
   attributes: Attributes;
   authorShare: Share;
   content: opt Content;
   custom: opt CustomData;
   customVar: opt CustomVar;
   domain: opt DomainName;
   lore: opt text;
   name: opt text;
   price: Price;
   quality: Quality;
   rechargeable: bool;
   secret: bool;
   tags: Tags;
   thumb: Content;
   transfer: ItemTransfer;
   ttl: opt nat32;
 };
type Memo = blob;
type ItemTransfer = 
 variant {
   bindsDuration: nat32;
   bindsForever;
   unrestricted;
 };
type IPFS_CID = text;
type ICP = record {e8s: nat64;};
type FtMintResponse = 
 variant {
   err: text;
   ok: record {
         id: FTokenId;
         transactionId: blob;
       };
 };
type FtMintRequest = 
 record {
   amount: Balance;
   options: RegisterRequest;
   subaccount: opt SubAccount;
   user: User__2;
 };
type FTokenId = nat64;
type FTKind = 
 variant {
   fractionless;
   normal;
 };
type ExternalUrl = text;
type DomainName = text;
type CustomVar = blob;
type CustomData = blob;
type ContentType = text;
type Content = 
 variant {
   external: ExternalUrl;
   internal: record {
               contentType: ContentType;
               size: nat32;
             };
   ipfs: record {
           cid: IPFS_CID;
           contentType: ContentType;
           size: nat32;
         };
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   tokenregistry: CanisterSlot;
   treasury: CanisterSlot;
 };
type Class = 
 service {
   balance: (BalanceRequest) -> (BalanceResponse) query;
   balanceAddExternal: (FTokenId, AccountIdentifier__2, Balance__3,
    FTKind) -> ();
   balanceAddExternalProtected: (FTokenId, AccountIdentifier__2, Balance__3,
    FTKind) -> (Result);
   config_set: (Config) -> ();
   exists: (AccountIdentifier) -> (bool) query;
   ft_mint:
    (record {
       aid: AccountIdentifier__2;
       amount: Balance__3;
       id: FTokenId;
       kind: FTKind;
     }) -> ();
   ft_register: (FtMintRequest) -> (FtMintResponse);
   nft_mint: (CanisterSlot, MintRequest) -> (MintResponse);
   nft_purchase: (CanisterSlot, PurchaseRequest) -> (PurchaseResponse);
   nft_recharge: (CanisterSlot, RechargeRequest) -> (RechargeResponse);
   oracle_set: (Oracle) -> ();
   pwr_purchase_claim: (PurchaseClaimRequest) -> (PurchaseClaimResponse);
   pwr_purchase_intent: (PurchaseIntentRequest) -> (PurchaseIntentResponse);
   pwr_transfer: (TransferOldRequest) -> (TransferOldResponse);
   pwr_withdraw: (WithdrawRequest) -> (WithdrawResponse);
   stats: () ->
    (record {
       cycles: nat;
       cycles_recieved: nat;
       distributed_affiliate: nat64;
       distributed_anvil: nat64;
       distributed_author: nat64;
       distributed_marketplace: nat64;
       distributed_seller: nat64;
       fees_charged: nat64;
       icp_deposited: nat64;
       icp_withdrawn: nat64;
       mint_accumulated: nat64;
       purchases_accumulated: nat64;
       recharge_accumulated: nat64;
       rts_heap_size: nat;
       rts_max_live_size: nat;
       rts_memory_size: nat;
       rts_reclaimed: nat;
       rts_total_allocation: nat;
       rts_version: text;
       total_accounts: nat;
     }) query;
   transfer: (TransferRequest) -> (TransferResponse);
   wallet_receive: () -> ();
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type BlockIndex = nat64;
type Balance__3 = nat64;
type Balance__2 = nat64;
type Balance__1 = nat64;
type BalanceResponse = 
 record {
   anv: Balance;
   ft: AccountRecordSerialized;
   oracle: Oracle__1;
   pwr: Balance;
 };
type BalanceRequest = record {user: User__2;};
type Balance = nat64;
type Attributes = vec Attribute;
type Attribute = 
 record {
   text;
   nat16;
 };
type AccountRecordSerialized = 
 vec record {
       FTokenId;
       Balance;
     };
type AccountIdentifier__2 = blob;
type AccountIdentifier__1 = blob;
type AccountIdentifier = blob;
service : () -> Class
