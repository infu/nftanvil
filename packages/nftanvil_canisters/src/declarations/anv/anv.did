type User__1 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier__1;
    };
   ok: record {transactionId: blob;};
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   subaccount: opt SubAccount;
   to: User;
 };
type TransactionAmount = nat64;
type SubAccount = blob;
type StatsResponse = 
 record {
   cycles: nat;
   cycles_recieved: nat;
   rts_heap_size: nat;
   rts_max_live_size: nat;
   rts_memory_size: nat;
   rts_reclaimed: nat;
   rts_total_allocation: nat;
   rts_version: text;
 };
type RewardRequest = 
 record {
   spent: Balance;
   user: AccountIdentifier;
 };
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type Memo = blob;
type Config = 
 record {
   account: CanisterRange;
   anv: CanisterSlot__1;
   history: CanisterSlot__1;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot__1;
   pwr: CanisterSlot__1;
   router: principal;
   space: vec vec nat64;
   treasury: CanisterSlot__1;
 };
type Class = 
 service {
   adminAllocate: (record {
                     amount: TransactionAmount;
                     user: User__1;
                   }) -> ();
   balance: (BalanceRequest) -> (BalanceResponse) query;
   config_set: (Config) -> ();
   dumpBalances: () -> (vec record {
                              AccountIdentifier__2;
                              Balance__1;
                            }) query;
   oracle_set: (Oracle) -> ();
   reward: (RewardRequest) -> ();
   stats: () -> (StatsResponse) query;
   transfer: (TransferRequest) -> (TransferResponse);
   wallet_receive: () -> ();
 };
type CanisterSlot__1 = nat64;
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type Balance__1 = nat64;
type BalanceResponse = nat64;
type BalanceRequest = record {user: User__1;};
type Balance = nat64;
type AccountIdentifier__2 = blob;
type AccountIdentifier__1 = blob;
type AccountIdentifier = blob;
service : () -> Class
