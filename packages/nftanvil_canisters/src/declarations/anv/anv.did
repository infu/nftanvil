type User = 
 variant {
   address: AccountIdentifier__1;
   "principal": principal;
 };
type TransactionTo = blob;
type TransactionFrom = blob;
type TransactionAmount = nat64;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier__1;
   Other: text;
 };
type BlockTimestamp = int;
type BlockIndex = nat32;
type BlockHash = blob;
type Block = 
 record {
   TransactionFrom;
   TransactionTo;
   TransactionAmount;
   BlockTimestamp;
   BlockHash;
 };
type Balance__1 = nat64;
type BalanceResponse = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier__1;
   user: User;
 };
type Balance = nat64;
type AccountIdentifier__1 = blob;
type AccountIdentifier = blob;
type ANV = 
 service {
   adminAllocate: (record {
                     amount: TransactionAmount;
                     user: User;
                   }) -> (BlockIndex, Block);
   balance: (BalanceRequest) -> (BalanceResponse) query;
   dumpBalances: () -> (vec record {
                              AccountIdentifier;
                              Balance;
                            }) query;
   dumpBlockchain: () -> (vec record {
                                BlockIndex;
                                Block;
                              }) query;
   tokenId: () -> (TokenIdentifier) query;
 };
service : () -> ANV
