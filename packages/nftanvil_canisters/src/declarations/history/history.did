type TokenIdentifier = nat64;
type Timestamp = int;
type Time = int;
type Share = nat16;
type PwrWithdraw = 
 record {
   amount: Balance;
   created: Timestamp;
   from: AccountIdentifier;
   to: AccountIdentifier;
 };
type PwrEvent = 
 variant {
   mint: EventFungibleMint;
   transfer: EventFungibleTransaction;
   withdraw: PwrWithdraw;
 };
type Price = 
 record {
   amount: nat64;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
 };
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type NftEvent = 
 variant {
   approve:
    record {
      created: Timestamp;
      spender: principal;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   burn:
    record {
      created: Timestamp;
      memo: Memo;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   mint:
    record {
      created: Timestamp;
      pwr: Balance;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   price:
    record {
      created: Timestamp;
      price: Price;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   purchase: NFTPurchase;
   socket:
    record {
      created: Timestamp;
      memo: Memo;
      plug: TokenIdentifier;
      socket: TokenIdentifier;
      user: AccountIdentifier;
    };
   transfer:
    record {
      created: Timestamp;
      from: AccountIdentifier;
      memo: Memo;
      to: AccountIdentifier;
      token: TokenIdentifier;
    };
   unsocket:
    record {
      created: Timestamp;
      memo: Memo;
      plug: TokenIdentifier;
      socket: TokenIdentifier;
      user: AccountIdentifier;
    };
   use:
    record {
      created: Timestamp;
      memo: Memo;
      token: TokenIdentifier;
      use: ItemUse;
      user: AccountIdentifier;
    };
 };
type NFTPurchase = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    amount: Balance;
                  };
   amount: Balance;
   author: record {
             address: AccountIdentifier;
             share: Share;
           };
   buyer: AccountIdentifier;
   created: Time;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
   recharge: Balance;
   seller: AccountIdentifier;
   token: TokenIdentifier;
 };
type Memo = blob;
type ListResponse = vec opt Event;
type ListRequest = 
 record {
   from: EventIndex;
   to: EventIndex;
 };
type ItemUse = 
 variant {
   consume;
   cooldown: Cooldown;
   prove;
 };
type InfoResponse = 
 record {
   previous: opt principal;
   total: EventIndex;
 };
type FtTransaction = 
 record {
   amount: Balance;
   created: Timestamp;
   from: AccountIdentifier;
   memo: Memo;
   to: AccountIdentifier;
   token: FTokenId;
 };
type FtRegister = 
 record {
   cost: Balance;
   created: Timestamp;
   token: FTokenId;
   user: AccountIdentifier;
 };
type FtMint = 
 record {
   amount: Balance;
   created: Timestamp;
   token: FTokenId;
   user: AccountIdentifier;
 };
type FtEvent = 
 variant {
   burn: FtBurn;
   mint: FtMint;
   register: FtRegister;
   transfer: FtTransaction;
 };
type FtBurn = 
 record {
   amount: Balance;
   created: Timestamp;
   memo: Memo;
   token: FTokenId;
   user: AccountIdentifier;
 };
type FTokenId = nat64;
type EventInfo__1 = 
 variant {
   anv: AnvEvent;
   ft: FtEvent;
   nft: NftEvent;
   pwr: PwrEvent;
 };
type EventInfo = 
 variant {
   anv: AnvEvent;
   ft: FtEvent;
   nft: NftEvent;
   pwr: PwrEvent;
 };
type EventIndex = nat32;
type EventFungibleTransaction = 
 record {
   amount: Balance;
   created: Timestamp;
   from: AccountIdentifier;
   memo: Memo;
   to: AccountIdentifier;
 };
type EventFungibleMint = 
 record {
   amount: Balance;
   created: Timestamp;
   user: AccountIdentifier;
 };
type Event = 
 record {
   hash: blob;
   info: EventInfo;
 };
type Cooldown = nat32;
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   tokenregistry: CanisterSlot;
   treasury: CanisterSlot;
 };
type Class = 
 service {
   add: (EventInfo__1) -> (AddResponse);
   config_set: (Config) -> ();
   get: (EventIndex) -> (opt Event) query;
   info: () -> (InfoResponse) query;
   list: (ListRequest) -> (ListResponse) query;
   oracle_set: (Oracle) -> ();
   stats: () ->
    (record {
       cycles: nat;
       cycles_recieved: nat;
       rts_heap_size: nat;
       rts_max_live_size: nat;
       rts_memory_size: nat;
       rts_reclaimed: nat;
       rts_total_allocation: nat;
       rts_version: text;
       transactions: nat32;
     }) query;
   wallet_receive: () -> ();
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type Balance = nat64;
type AnvEvent = variant {transfer: EventFungibleTransaction;};
type AddResponse = blob;
type AccountIdentifier = blob;
service : () -> Class
