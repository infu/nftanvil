type Router = 
 service {
   config_get: () -> (Config__1) query;
   config_set: (Config__1) -> ();
   create_local_canisters: () -> ();
   event_history_full: () -> ();
   event_nft_full: (principal) -> ();
   log_get: () -> (vec LogEvent) query;
   oracle_set: (Oracle__1) -> ();
   refuel: () -> ();
   refuel_unoptimised: () -> ();
   reinstall: () -> ();
   settings_get: () -> (Config, Oracle) query;
   start_all: () -> ();
   stats: () ->
    (record {
       cycles: nat;
       cycles_recieved: nat;
       jobs_fail: nat;
       jobs_success: nat;
       maintenance: bool;
       refuel: nat;
       rts_heap_size: nat;
       rts_max_live_size: nat;
       rts_memory_size: nat;
       rts_reclaimed: nat;
       rts_total_allocation: nat;
       rts_version: text;
     }) query;
   stop_all: () -> ();
   upgrade: () -> ();
   wallet_receive: () -> ();
   wasm_set: (record {
                name: text;
                wasm: vec nat8;
              }) -> ();
 };
type Oracle__1 = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type Oracle = 
 record {
   anvFee: nat64;
   icpCycles: nat64;
   icpFee: nat64;
   pwrFee: nat64;
 };
type LogEvent = 
 record {
   msg: text;
   time: nat32;
 };
type Config__1 = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   tokenregistry: CanisterSlot;
   treasury: CanisterSlot;
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   tokenregistry: CanisterSlot;
   treasury: CanisterSlot;
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
service : () -> Router
