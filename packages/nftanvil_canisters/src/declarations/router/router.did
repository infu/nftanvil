type StatsResponse = 
 record {
   cycles: nat;
   rts_heap_size: nat;
   rts_max_live_size: nat;
   rts_memory_size: nat;
   rts_reclaimed: nat;
   rts_total_allocation: nat;
   rts_version: text;
 };
type Router = 
 service {
   config_set: (Config) -> ();
   fetchNFTCan: (nat) -> (text) query;
   fetchNFTCanisters: () -> (vec text) query;
   fetchSetup: () ->
    (record {
       acclist: vec text;
       anv: text;
       history: text;
       pwr: text;
       treasury: text;
     }) query;
   getAvailable: () -> (vec text) query;
   isLegitimate: (principal) -> (bool) query;
   reportOutOfMemory: () -> ();
   stats: () -> (StatsResponse) query;
 };
type Config = 
 record {
   account: vec principal;
   anv: principal;
   history: principal;
   nft: vec principal;
   nft_avail: vec principal;
   pwr: principal;
   router: principal;
   slot: nat;
   treasury: principal;
 };
service : () -> Router
