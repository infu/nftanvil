type TransactionId = blob;
type TokenIdentifier = nat64;
type SubAccount = blob;
type Result_4 = 
 variant {
   err: text;
   ok: Basket;
 };
type Result_3 = 
 variant {
   err: text;
   ok;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Balance;
 };
type Result_1 = 
 variant {
   err: text;
   ok: blob;
 };
type Result = 
 variant {
   err: text;
   ok: AccountRecordSerialized;
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   treasury: CanisterSlot;
 };
type Class = 
 service {
   add: (TokenIdentifier) -> (Result_3);
   airdrop_add: (blob) -> (Result_3);
   airdrop_use: (AccountIdentifier, blob) -> (Result_4);
   buy_tx: (TransactionId, opt SubAccount) -> (Result_4);
   claim: (AccountIdentifier, opt SubAccount, TokenIdentifier) -> (Result_3);
   icp_balance: () -> (Result_2);
   icp_transfer: (AccountIdentifier, Balance) -> (Result_1);
   owned: (AccountIdentifier) -> (Result) query;
   set_admin: (principal) -> () oneway;
   set_anvil_config: (Config) -> ();
   stats: () ->
    (record {
       added: nat;
       airdrop: nat;
       available: nat;
       purchase: nat;
       total: nat;
     }) query;
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type Basket = vec opt TokenIdentifier;
type Balance = nat64;
type AccountRecordSerialized = record {tokens: vec TokenIdentifier;};
type AccountIdentifier = blob;
service : () -> Class
