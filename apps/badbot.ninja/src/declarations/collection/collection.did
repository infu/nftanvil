type TransactionId = blob;
type Transaction = 
 record {
   hash: blob;
   info: EventInfo;
 };
type TokenIdentifier = nat64;
type Timestamp = int;
type Time = int;
type Share = nat16;
type PwrWithdraw = 
 record {
   amount: Balance;
   created: Timestamp;
   from: AccountIdentifier;
   to: AccountIdentifier;
 };
type PwrEvent = 
 variant {
   mint: EventFungibleMint;
   transfer: EventFungibleTransaction;
   withdraw: PwrWithdraw;
 };
type Price = 
 record {
   amount: nat64;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
 };
type NftEvent = 
 variant {
   approve:
    record {
      created: Timestamp;
      spender: principal;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   burn:
    record {
      created: Timestamp;
      memo: Memo;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   mint:
    record {
      created: Timestamp;
      pwr: Balance;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   price:
    record {
      created: Timestamp;
      price: Price;
      token: TokenIdentifier;
      user: AccountIdentifier;
    };
   purchase: NFTPurchase;
   socket:
    record {
      created: Timestamp;
      memo: Memo;
      plug: TokenIdentifier;
      socket: TokenIdentifier;
      user: AccountIdentifier;
    };
   transfer:
    record {
      created: Timestamp;
      from: AccountIdentifier;
      memo: Memo;
      to: AccountIdentifier;
      token: TokenIdentifier;
    };
   unsocket:
    record {
      created: Timestamp;
      memo: Memo;
      plug: TokenIdentifier;
      socket: TokenIdentifier;
      user: AccountIdentifier;
    };
   use:
    record {
      created: Timestamp;
      memo: Memo;
      token: TokenIdentifier;
      use: ItemUse;
      user: AccountIdentifier;
    };
 };
type NFTPurchase = 
 record {
   affiliate: opt record {
                    address: AccountIdentifier;
                    amount: Balance;
                  };
   amount: Balance;
   author: record {
             address: AccountIdentifier;
             share: Share;
           };
   buyer: AccountIdentifier;
   created: Time;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
   recharge: Balance;
   seller: AccountIdentifier;
   token: TokenIdentifier;
 };
type Memo = blob;
type ItemUse = 
 variant {
   consume;
   cooldown: Cooldown;
   prove;
 };
type EventInfo = 
 variant {
   anv: AnvEvent;
   nft: NftEvent;
   pwr: PwrEvent;
 };
type EventFungibleTransaction = 
 record {
   amount: Balance;
   created: Timestamp;
   from: AccountIdentifier;
   memo: Memo;
   to: AccountIdentifier;
 };
type EventFungibleMint = 
 record {
   amount: Balance;
   created: Timestamp;
   user: AccountIdentifier;
 };
type Cooldown = nat32;
type Class = 
 service {
   check_tx: (TransactionId) -> (opt Transaction);
 };
type Balance = nat64;
type AnvEvent = variant {transfer: EventFungibleTransaction;};
type AccountIdentifier = blob;
service : () -> Class
