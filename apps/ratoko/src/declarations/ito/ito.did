type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponseError = 
 variant {
   ICE: text;
   InsufficientBalance;
   InvalidToken;
   NotTransferable;
   Other: text;
   OutOfPower;
   Rejected;
   Unauthorized: AccountIdentifier;
 };
type TransactionId = blob;
type TokenIndex = nat16;
type TokenIdentifier = nat64;
type Tags = vec Tag;
type Tag = text;
type SubAccount = blob;
type Share = nat16;
type Result_4 = 
 variant {
   err: text;
   ok;
 };
type Result_3 = 
 variant {
   err: text;
   ok: Balance;
 };
type Result_2 = 
 variant {
   err: text;
   ok: blob;
 };
type Result_1 = 
 variant {
   err: text;
   ok: AccountRecordSerialized;
 };
type Result = 
 variant {
   err: text;
   ok: Basket;
 };
type Quality = nat8;
type Price = 
 record {
   amount: nat64;
   marketplace: opt record {
                      address: AccountIdentifier;
                      share: Share;
                    };
 };
type MintResponse = 
 variant {
   err:
    variant {
      ClassError: text;
      ICE: text;
      InsufficientBalance;
      Invalid: text;
      OutOfMemory;
      Pwr: TransferResponseError;
      Rejected;
      Unauthorized;
    };
   ok: record {
         tokenIndex: TokenIndex;
         transactionId: TransactionId;
       };
 };
type MintRequest = 
 record {
   metadata: MetadataInput;
   subaccount: opt SubAccount;
   user: User;
 };
type MetadataInput = 
 record {
   attributes: Attributes;
   authorShare: Share;
   content: opt Content;
   custom: opt CustomData;
   customVar: opt CustomVar;
   domain: opt DomainName;
   lore: opt text;
   name: opt text;
   price: Price;
   quality: Quality;
   rechargeable: bool;
   secret: bool;
   tags: Tags;
   thumb: Content;
   transfer: ItemTransfer;
   ttl: opt nat32;
 };
type Memo = blob;
type ItemTransfer = 
 variant {
   bindsDuration: nat32;
   bindsForever;
   unrestricted;
 };
type IPFS_CID = text;
type ExternalUrl = text;
type DomainName = text;
type CustomVar = blob;
type CustomData = blob;
type ContentType = text;
type Content = 
 variant {
   external: ExternalUrl;
   internal: record {
               contentType: ContentType;
               size: nat32;
             };
   ipfs: record {
           cid: IPFS_CID;
           contentType: ContentType;
           size: nat32;
         };
 };
type Config = 
 record {
   account: CanisterRange;
   anvil: CanisterSlot;
   history: CanisterSlot;
   history_range: CanisterRange;
   nft: CanisterRange;
   nft_avail: vec CanisterSlot;
   pwr: CanisterRange;
   router: principal;
   space: vec vec nat64;
   treasury: CanisterSlot;
 };
type Class = 
 service {
   add: (TokenIdentifier) -> (Result_4);
   airdrop_add: (blob) -> (Result_4);
   airdrop_use: (AccountIdentifier, blob) -> (Result);
   burn: (BurnRequest) -> (BurnResponse);
   buy_tx: (TransactionId, opt SubAccount) -> (Result);
   claim: (AccountIdentifier, opt SubAccount, TokenIdentifier) -> (Result_4);
   icp_balance: () -> (Result_3);
   icp_transfer: (AccountIdentifier, Balance) -> (Result_2);
   nft_mint: (CanisterSlot, MintRequest) -> (MintResponse);
   owned: (AccountIdentifier) -> (Result_1) query;
   set_admin: (principal) -> () oneway;
   set_anvil_config: (Config) -> ();
   set_params: (record {
                  airdrop: nat;
                  purchase: nat;
                }) -> () oneway;
   stats: () ->
    (record {
       added: nat;
       airdrop: nat;
       available: nat;
       purchase: nat;
       total: nat;
     }) query;
   ticket_tx: (TransactionId, opt SubAccount) -> (Result);
 };
type CanisterSlot = nat64;
type CanisterRange = 
 record {
   CanisterSlot;
   CanisterSlot;
 };
type BurnResponse = 
 variant {
   err: TransferResponseError;
   ok: record {transactionId: TransactionId;};
 };
type BurnRequest = 
 record {
   memo: Memo;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type Basket = vec opt TokenIdentifier;
type Balance = nat64;
type Attributes = vec Attribute;
type Attribute = 
 record {
   text;
   nat16;
 };
type AccountRecordSerialized = record {tokens: vec TokenIdentifier;};
type AccountIdentifier = blob;
service : () -> Class
