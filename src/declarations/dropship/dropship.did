type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier = text;
type Token = 
 service {
   allowance: (Request) -> (Response) query;
   approve: (ApproveRequest) -> ();
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier) -> (BearerResponse) query;
   extensions: () -> (vec Extension) query;
   greet: (text) -> (text) query;
   metadata: (TokenIdentifier) -> (MetadataResponse) query;
   mintNFT: (MintRequest) -> (MintResponse);
   supply: (TokenIdentifier) -> (SupplyResponse) query;
   transfer: (TransferRequest) -> (TransferResponse);
 };
type SupplyResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type SubAccount = vec nat8;
type Response = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type Request = 
 record {
   owner: User;
   spender: principal;
   token: TokenIdentifier;
 };
type MintResponse = 
 variant {
   err: CommonError;
   ok: TokenIndex;
 };
type MintRequest = 
 record {
   metadata: opt blob;
   to: User;
 };
type MetadataResponse = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Extension = text;
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type BearerResponse = 
 variant {
   err: CommonError;
   ok: AccountIdentifier;
 };
type BalanceResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AccountIdentifier = text;
service : () -> Token
