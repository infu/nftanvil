type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UploadChunkRequest = 
 record {
   chunkIdx: nat32;
   data: blob;
   position: variant {
               content;
               thumb;
             };
   tokenIndex: TokenIndex;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier = text;
type SupplyResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type SubAccount = vec nat8;
type StatsResponse = 
 record {
   accounts: nat32;
   burned: nat32;
   cycles: nat;
   minted: nat32;
   rts_heap_size: nat;
   rts_max_live_size: nat;
   rts_memory_size: nat;
   rts_reclaimed: nat;
   rts_total_allocation: nat;
   rts_version: text;
   transfers: nat32;
 };
type Response = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type Request = 
 record {
   owner: User;
   spender: principal;
   token: TokenIdentifier;
 };
type NFT = 
 service {
   allowance: (Request) -> (Response) query;
   approve: (ApproveRequest) -> (ApproveResponse);
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier) -> (BearerResponse) query;
   burn: (BurnRequest) -> (BurnResponse);
   cyclesAccept: () -> ();
   cyclesBalance: () -> (nat) query;
   debugMode: (opt text) -> ();
   extensions: () -> (vec Extension) query;
   fetchChunk: (FetchChunkRequest) -> (opt blob);
   metadata: (TokenIdentifier) -> (MetadataResponse) query;
   mintNFT: (MintRequest) -> (MintResponse);
   stats: () -> (StatsResponse) query;
   supply: (TokenIdentifier) -> (SupplyResponse) query;
   transfer: (TransferRequest) -> (TransferResponse);
   uploadChunk: (UploadChunkRequest) -> ();
 };
type MintResponse = 
 variant {
   err: variant {
          OutOfMemory;
          Rejected;
        };
   ok: TokenIndex;
 };
type MintRequest = 
 record {
   metadata: MetadataInput;
   to: User;
 };
type MetavarsFrozen = 
 record {
   boundUntil: opt nat32;
   cooldownUntil: opt nat32;
 };
type MetadataResponse = 
 variant {
   err: CommonError;
   ok: record {
         data: Metadata;
         vars: MetavarsFrozen;
       };
 };
type MetadataInput = 
 record {
   attributes: vec Attribute;
   content: opt Content;
   extensionCanister: opt principal;
   hold: opt ItemHold;
   lore: opt text;
   name: opt text;
   quality: opt nat8;
   secret: bool;
   thumb: Content;
   transfer: opt ItemTransfer;
   ttl: opt nat32;
   use: opt ItemUse;
 };
type Metadata = 
 record {
   attributes: vec Attribute;
   content: opt Content;
   created: nat32;
   entropy: blob;
   extensionCanister: opt principal;
   hold: opt ItemHold;
   level: nat8;
   lore: opt text;
   minter: opt principal;
   name: opt text;
   quality: opt nat8;
   secret: bool;
   thumb: Content;
   transfer: opt ItemTransfer;
   ttl: opt nat32;
   use: opt ItemUse;
 };
type Memo = blob;
type ItemUse = 
 variant {
   consumable: record {
                 desc: text;
                 useId: text;
               };
   cooldown: record {
               desc: text;
               duration: nat32;
               useId: text;
             };
 };
type ItemTransfer = 
 variant {
   bindsDuration: nat32;
   bindsForever;
   unrestricted;
 };
type ItemHold = variant {external: record {
                                     desc: text;
                                     holdId: text;
                                   };};
type FetchChunkRequest = 
 record {
   chunkIdx: nat32;
   position: variant {
               content;
               thumb;
             };
   tokenIndex: TokenIndex;
 };
type Extension = text;
type ContentType = text;
type Content = 
 variant {
   external: record {
               contentType: ContentType;
               idx: opt nat32;
             };
   internal: record {
               contentType: ContentType;
               size: nat32;
             };
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type BurnResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type BurnRequest = 
 record {
   amount: Balance;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
   user: User;
 };
type BearerResponse = 
 variant {
   err: CommonError;
   ok: AccountIdentifier;
 };
type BalanceResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type Attribute = 
 record {
   text;
   int16;
 };
type ApproveResponse = 
 variant {
   err:
    variant {
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Unauthorized: AccountIdentifier;
    };
   ok;
 };
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AccountIdentifier = text;
service : (record {acclist: vec text;}) -> NFT
